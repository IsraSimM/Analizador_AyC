
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND CHAR CHAR CHAR_LITERAL COMMA COMPARER DIVIDE DOT ELSE EQUAL FLOAT FLOAT FOR HEADER IDENTIFIER IF INCLUDE INT INT LBRACE LBRAKET LPAREN MAIN MINUS NUMBER PLUS PRINTF RBRACE RBRAKET RETURN RPAREN SCANF SEMICOLON STRING TIMESprogram : INCLUDE HEADER program\n               | functionfunction : INT MAIN LPAREN RPAREN LBRACE statement_list RBRACEstatement_list : statement_list statement\n                      | statementstatement : declaration\n                 | assignment\n                 | for_loop\n                 | if_statement\n                 | function_call\n                 | return_statementidentifier_list : IDENTIFIER\n                       | IDENTIFIER COMMA identifier_listdeclaration : type_specifier IDENTIFIER EQUAL expression SEMICOLON\n                   | type_specifier identifier_list SEMICOLON\n                   | type_specifier identifier_list LBRAKET NUMBER RBRAKET SEMICOLONtype_specifier : INT\n                      | FLOAT\n                      | CHARcompound_assignment : PLUS EQUAL\n                           | MINUS EQUAL\n                           | TIMES EQUAL\n                           | DIVIDE EQUALassignment : IDENTIFIER EQUAL expression SEMICOLON\n                  | IDENTIFIER compound_assignment expression SEMICOLON\n                  | IDENTIFIER LBRAKET expression RBRAKET compound_assignment expression SEMICOLON\n                  | IDENTIFIER LBRAKET expression RBRAKET EQUAL expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | LPAREN expression RPAREN\n                  | NUMBER\n                  | CHAR_LITERAL\n                  | CHAR\n                  | IDENTIFIER\n                  | IDENTIFIER LBRAKET expression RBRAKETexpression_list : expression\n                       | expression COMMA expression_listunitarymodifiers : IDENTIFIER PLUS PLUS\n                        | IDENTIFIER MINUS MINUSfor_loop : FOR LPAREN assignment condition SEMICOLON unitarymodifiers RPAREN LBRACE statement_list RBRACEcondition : expression COMPARER expressionif_statement : IF LPAREN condition RPAREN LBRACE statement_list RBRACE\n                    | IF LPAREN condition RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEfunction_call : PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN SEMICOLON\n                     | PRINTF LPAREN STRING RPAREN SEMICOLON\n                     | PRINTF LPAREN STRING COMMA expression_list RPAREN SEMICOLON\n                     | SCANF LPAREN STRING COMMA AMPERSAND IDENTIFIER RPAREN SEMICOLONreturn_statement : RETURN SEMICOLON\n                        | RETURN expression SEMICOLON'
    
_lr_action_items = {'INCLUDE':([0,5,],[2,2,]),'INT':([0,5,10,12,13,14,15,16,17,18,19,30,44,53,67,78,79,93,98,103,106,111,116,117,121,122,123,126,130,131,132,133,134,135,],[4,4,11,11,-5,-6,-7,-8,-9,-10,-11,-4,-50,-15,-51,-24,-25,-14,11,-47,-16,11,-26,-27,-44,-46,-48,11,-49,11,11,-42,11,-45,]),'$end':([1,3,7,29,],[0,-2,-1,-3,]),'HEADER':([2,],[5,]),'MAIN':([4,],[6,]),'LPAREN':([6,22,23,24,25,26,33,34,35,41,46,51,58,59,60,61,62,68,69,70,71,73,78,79,83,84,95,96,114,116,117,],[8,40,41,42,43,46,46,46,46,46,46,46,-20,-21,-22,-23,46,46,46,46,46,46,-24,-25,46,46,46,46,46,-26,-27,]),'RPAREN':([8,47,48,49,50,63,65,72,87,88,89,90,91,99,100,101,102,105,109,115,124,127,128,],[9,-33,-34,-35,-36,82,85,91,-28,-29,-30,-31,-32,-43,112,113,-38,-37,118,125,-39,-40,-41,]),'LBRACE':([9,82,118,129,],[10,98,126,132,]),'IDENTIFIER':([10,11,12,13,14,15,16,17,18,19,20,26,27,28,30,33,34,35,40,41,44,46,51,52,53,58,59,60,61,62,67,68,69,70,71,73,78,79,83,84,93,95,96,97,98,103,104,106,111,114,116,117,121,122,123,126,130,131,132,133,134,135,],[21,-17,21,-5,-6,-7,-8,-9,-10,-11,31,50,-18,-19,-4,50,50,50,21,50,-50,50,50,75,-15,-20,-21,-22,-23,50,-51,50,50,50,50,50,-24,-25,50,100,-14,50,50,110,21,-47,115,-16,21,50,-26,-27,-44,-46,-48,21,-49,21,21,-42,21,-45,]),'FOR':([10,12,13,14,15,16,17,18,19,30,44,53,67,78,79,93,98,103,106,111,116,117,121,122,123,126,130,131,132,133,134,135,],[22,22,-5,-6,-7,-8,-9,-10,-11,-4,-50,-15,-51,-24,-25,-14,22,-47,-16,22,-26,-27,-44,-46,-48,22,-49,22,22,-42,22,-45,]),'IF':([10,12,13,14,15,16,17,18,19,30,44,53,67,78,79,93,98,103,106,111,116,117,121,122,123,126,130,131,132,133,134,135,],[23,23,-5,-6,-7,-8,-9,-10,-11,-4,-50,-15,-51,-24,-25,-14,23,-47,-16,23,-26,-27,-44,-46,-48,23,-49,23,23,-42,23,-45,]),'PRINTF':([10,12,13,14,15,16,17,18,19,30,44,53,67,78,79,93,98,103,106,111,116,117,121,122,123,126,130,131,132,133,134,135,],[24,24,-5,-6,-7,-8,-9,-10,-11,-4,-50,-15,-51,-24,-25,-14,24,-47,-16,24,-26,-27,-44,-46,-48,24,-49,24,24,-42,24,-45,]),'SCANF':([10,12,13,14,15,16,17,18,19,30,44,53,67,78,79,93,98,103,106,111,116,117,121,122,123,126,130,131,132,133,134,135,],[25,25,-5,-6,-7,-8,-9,-10,-11,-4,-50,-15,-51,-24,-25,-14,25,-47,-16,25,-26,-27,-44,-46,-48,25,-49,25,25,-42,25,-45,]),'RETURN':([10,12,13,14,15,16,17,18,19,30,44,53,67,78,79,93,98,103,106,111,116,117,121,122,123,126,130,131,132,133,134,135,],[26,26,-5,-6,-7,-8,-9,-10,-11,-4,-50,-15,-51,-24,-25,-14,26,-47,-16,26,-26,-27,-44,-46,-48,26,-49,26,26,-42,26,-45,]),'FLOAT':([10,12,13,14,15,16,17,18,19,30,44,53,67,78,79,93,98,103,106,111,116,117,121,122,123,126,130,131,132,133,134,135,],[27,27,-5,-6,-7,-8,-9,-10,-11,-4,-50,-15,-51,-24,-25,-14,27,-47,-16,27,-26,-27,-44,-46,-48,27,-49,27,27,-42,27,-45,]),'CHAR':([10,12,13,14,15,16,17,18,19,26,30,33,34,35,41,44,46,51,53,58,59,60,61,62,67,68,69,70,71,73,78,79,83,84,93,95,96,98,103,106,111,114,116,117,121,122,123,126,130,131,132,133,134,135,],[28,28,-5,-6,-7,-8,-9,-10,-11,49,-4,49,49,49,49,-50,49,49,-15,-20,-21,-22,-23,49,-51,49,49,49,49,49,-24,-25,49,49,-14,49,49,28,-47,-16,28,49,-26,-27,-44,-46,-48,28,-49,28,28,-42,28,-45,]),'RBRACE':([12,13,14,15,16,17,18,19,30,44,53,67,78,79,93,103,106,111,116,117,121,122,123,130,131,133,134,135,],[29,-5,-6,-7,-8,-9,-10,-11,-4,-50,-15,-51,-24,-25,-14,-47,-16,121,-26,-27,-44,-46,-48,-49,133,-42,135,-45,]),'EQUAL':([21,31,36,37,38,39,80,],[33,51,58,59,60,61,96,]),'LBRAKET':([21,31,32,50,75,76,100,],[35,-12,54,73,-12,-13,73,]),'PLUS':([21,45,47,48,49,50,55,56,57,64,72,74,80,87,88,89,90,91,92,99,100,102,105,107,108,110,119,],[36,68,-33,-34,-35,-36,68,68,68,68,68,68,36,68,68,68,68,-32,68,68,-36,68,-37,68,68,119,127,]),'MINUS':([21,45,47,48,49,50,55,56,57,64,72,74,80,87,88,89,90,91,92,99,100,102,105,107,108,110,120,],[37,69,-33,-34,-35,-36,69,69,69,69,69,69,37,69,69,69,69,-32,69,69,-36,69,-37,69,69,120,128,]),'TIMES':([21,45,47,48,49,50,55,56,57,64,72,74,80,87,88,89,90,91,92,99,100,102,105,107,108,],[38,70,-33,-34,-35,-36,70,70,70,70,70,70,38,70,70,70,70,-32,70,70,-36,70,-37,70,70,]),'DIVIDE':([21,45,47,48,49,50,55,56,57,64,72,74,80,87,88,89,90,91,92,99,100,102,105,107,108,],[39,71,-33,-34,-35,-36,71,71,71,71,71,71,39,71,71,71,71,-32,71,71,-36,71,-37,71,71,]),'SEMICOLON':([26,31,32,45,47,48,49,50,55,56,74,75,76,81,85,87,88,89,90,91,94,99,105,107,108,112,113,125,],[44,-12,53,67,-33,-34,-35,-36,78,79,93,-12,-13,97,103,-28,-29,-30,-31,-32,106,-43,-37,116,117,122,123,130,]),'NUMBER':([26,33,34,35,41,46,51,54,58,59,60,61,62,68,69,70,71,73,78,79,83,84,95,96,114,116,117,],[47,47,47,47,47,47,47,77,-20,-21,-22,-23,47,47,47,47,47,47,-24,-25,47,47,47,47,47,-26,-27,]),'CHAR_LITERAL':([26,33,34,35,41,46,51,58,59,60,61,62,68,69,70,71,73,78,79,83,84,95,96,114,116,117,],[48,48,48,48,48,48,48,-20,-21,-22,-23,48,48,48,48,48,48,-24,-25,48,48,48,48,48,-26,-27,]),'COMMA':([31,47,48,49,50,65,66,75,87,88,89,90,91,100,102,105,],[52,-33,-34,-35,-36,84,86,52,-28,-29,-30,-31,-32,-36,114,-37,]),'STRING':([42,43,],[65,66,]),'RBRAKET':([47,48,49,50,57,77,87,88,89,90,91,92,105,],[-33,-34,-35,-36,80,94,-28,-29,-30,-31,-32,105,-37,]),'COMPARER':([47,48,49,50,64,87,88,89,90,91,105,],[-33,-34,-35,-36,83,-28,-29,-30,-31,-32,-37,]),'AMPERSAND':([86,],[104,]),'ELSE':([121,],[129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,5,],[1,7,]),'function':([0,5,],[3,3,]),'statement_list':([10,98,126,132,],[12,111,131,134,]),'statement':([10,12,98,111,126,131,132,134,],[13,30,13,30,13,30,13,30,]),'declaration':([10,12,98,111,126,131,132,134,],[14,14,14,14,14,14,14,14,]),'assignment':([10,12,40,98,111,126,131,132,134,],[15,15,62,15,15,15,15,15,15,]),'for_loop':([10,12,98,111,126,131,132,134,],[16,16,16,16,16,16,16,16,]),'if_statement':([10,12,98,111,126,131,132,134,],[17,17,17,17,17,17,17,17,]),'function_call':([10,12,98,111,126,131,132,134,],[18,18,18,18,18,18,18,18,]),'return_statement':([10,12,98,111,126,131,132,134,],[19,19,19,19,19,19,19,19,]),'type_specifier':([10,12,98,111,126,131,132,134,],[20,20,20,20,20,20,20,20,]),'identifier_list':([20,52,],[32,76,]),'compound_assignment':([21,80,],[34,95,]),'expression':([26,33,34,35,41,46,51,62,68,69,70,71,73,83,84,95,96,114,],[45,55,56,57,64,72,74,64,87,88,89,90,92,99,102,107,108,102,]),'condition':([41,62,],[63,81,]),'expression_list':([84,114,],[101,124,]),'unitarymodifiers':([97,],[109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> INCLUDE HEADER program','program',3,'p_program','sintaxy.py',30),
  ('program -> function','program',1,'p_program','sintaxy.py',31),
  ('function -> INT MAIN LPAREN RPAREN LBRACE statement_list RBRACE','function',7,'p_function','sintaxy.py',38),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','sintaxy.py',42),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintaxy.py',43),
  ('statement -> declaration','statement',1,'p_statement','sintaxy.py',50),
  ('statement -> assignment','statement',1,'p_statement','sintaxy.py',51),
  ('statement -> for_loop','statement',1,'p_statement','sintaxy.py',52),
  ('statement -> if_statement','statement',1,'p_statement','sintaxy.py',53),
  ('statement -> function_call','statement',1,'p_statement','sintaxy.py',54),
  ('statement -> return_statement','statement',1,'p_statement','sintaxy.py',55),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','sintaxy.py',59),
  ('identifier_list -> IDENTIFIER COMMA identifier_list','identifier_list',3,'p_identifier_list','sintaxy.py',60),
  ('declaration -> type_specifier IDENTIFIER EQUAL expression SEMICOLON','declaration',5,'p_declaration','sintaxy.py',67),
  ('declaration -> type_specifier identifier_list SEMICOLON','declaration',3,'p_declaration','sintaxy.py',68),
  ('declaration -> type_specifier identifier_list LBRAKET NUMBER RBRAKET SEMICOLON','declaration',6,'p_declaration','sintaxy.py',69),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','sintaxy.py',78),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','sintaxy.py',79),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','sintaxy.py',80),
  ('compound_assignment -> PLUS EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',84),
  ('compound_assignment -> MINUS EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',85),
  ('compound_assignment -> TIMES EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',86),
  ('compound_assignment -> DIVIDE EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',87),
  ('assignment -> IDENTIFIER EQUAL expression SEMICOLON','assignment',4,'p_assignment','sintaxy.py',91),
  ('assignment -> IDENTIFIER compound_assignment expression SEMICOLON','assignment',4,'p_assignment','sintaxy.py',92),
  ('assignment -> IDENTIFIER LBRAKET expression RBRAKET compound_assignment expression SEMICOLON','assignment',7,'p_assignment','sintaxy.py',93),
  ('assignment -> IDENTIFIER LBRAKET expression RBRAKET EQUAL expression SEMICOLON','assignment',7,'p_assignment','sintaxy.py',94),
  ('expression -> expression PLUS expression','expression',3,'p_expression','sintaxy.py',101),
  ('expression -> expression MINUS expression','expression',3,'p_expression','sintaxy.py',102),
  ('expression -> expression TIMES expression','expression',3,'p_expression','sintaxy.py',103),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','sintaxy.py',104),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','sintaxy.py',105),
  ('expression -> NUMBER','expression',1,'p_expression','sintaxy.py',106),
  ('expression -> CHAR_LITERAL','expression',1,'p_expression','sintaxy.py',107),
  ('expression -> CHAR','expression',1,'p_expression','sintaxy.py',108),
  ('expression -> IDENTIFIER','expression',1,'p_expression','sintaxy.py',109),
  ('expression -> IDENTIFIER LBRAKET expression RBRAKET','expression',4,'p_expression','sintaxy.py',110),
  ('expression_list -> expression','expression_list',1,'p_expression_list','sintaxy.py',119),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','sintaxy.py',120),
  ('unitarymodifiers -> IDENTIFIER PLUS PLUS','unitarymodifiers',3,'p_unitarymodifiers','sintaxy.py',127),
  ('unitarymodifiers -> IDENTIFIER MINUS MINUS','unitarymodifiers',3,'p_unitarymodifiers','sintaxy.py',128),
  ('for_loop -> FOR LPAREN assignment condition SEMICOLON unitarymodifiers RPAREN LBRACE statement_list RBRACE','for_loop',10,'p_for_loop','sintaxy.py',132),
  ('condition -> expression COMPARER expression','condition',3,'p_condition','sintaxy.py',136),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statement_list RBRACE','if_statement',7,'p_if_statement','sintaxy.py',140),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_statement',11,'p_if_statement','sintaxy.py',141),
  ('function_call -> PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN SEMICOLON','function_call',7,'p_function_call','sintaxy.py',148),
  ('function_call -> PRINTF LPAREN STRING RPAREN SEMICOLON','function_call',5,'p_function_call','sintaxy.py',149),
  ('function_call -> PRINTF LPAREN STRING COMMA expression_list RPAREN SEMICOLON','function_call',7,'p_function_call','sintaxy.py',150),
  ('function_call -> SCANF LPAREN STRING COMMA AMPERSAND IDENTIFIER RPAREN SEMICOLON','function_call',8,'p_function_call','sintaxy.py',151),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','sintaxy.py',155),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','sintaxy.py',156),
]
