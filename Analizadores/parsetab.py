
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTIDIVIDECOMA COMPARADOR DIVIDE FOR IDENTIFICADOR IGUAL INCLUDE LLLAVE LPAREN MULTI NUMERO PUNTOYCOMA RESTA RLLAVE RPAREN SUMA TIPODATOstatement : FOR LPAREN for_init PUNTOYCOMA condition PUNTOYCOMA for_update RPAREN blockfor_init : declaration\n                | expression PUNTOYCOMA\n                | emptydeclaration : TIPODATO identificador_list PUNTOYCOMAidentificador_list : IDENTIFICADOR IGUAL expression\n                          | IDENTIFICADOR\n                          | IDENTIFICADOR COMA identificador_listcondition : expression COMPARADOR expressionfor_update : IDENTIFICADOR SUMA SUMA\n                  | IDENTIFICADOR RESTA RESTApreprocessor_directive : INCLUDEfunction_definition : TIPODATO IDENTIFICADOR LPAREN RPAREN blockblock : LLLAVE RLLAVE\n             | LLLAVE statement_list RLLAVEstatement_list : statement\n                      | statement statement_liststatement : declaration\n                 | expression PUNTOYCOMA\n                 | preprocessor_directive\n                 | function_definitionexpression : expression SUMA expression\n                  | expression RESTA expression\n                  | expression MULTI expression\n                  | expression DIVIDE expressionexpression : NUMEROexpression : IDENTIFICADORexpression : IDENTIFICADOR IGUAL expressionempty :'
    
_lr_action_items = {'FOR':([0,3,5,6,10,12,29,42,43,46,48,52,57,],[2,-18,-20,-21,-12,-19,-5,-13,2,-14,2,-15,-1,]),'TIPODATO':([0,3,5,6,10,11,12,29,42,43,46,48,52,57,],[7,-18,-20,-21,-12,24,-19,-5,-13,7,-14,7,-15,-1,]),'NUMERO':([0,3,5,6,10,11,12,13,14,15,16,19,29,31,34,42,43,45,46,48,52,57,],[8,-18,-20,-21,-12,8,-19,8,8,8,8,8,-5,8,8,-13,8,8,-14,8,-15,-1,]),'IDENTIFICADOR':([0,3,5,6,7,10,11,12,13,14,15,16,19,24,29,31,32,34,42,43,44,45,46,48,52,57,],[9,-18,-20,-21,18,-12,9,-19,9,9,9,9,9,36,-5,9,36,9,-13,9,50,9,-14,9,-15,-1,]),'INCLUDE':([0,3,5,6,10,12,29,42,43,46,48,52,57,],[10,-18,-20,-21,-12,-19,-5,-13,10,-14,10,-15,-1,]),'$end':([1,3,5,6,10,12,29,42,46,52,57,],[0,-18,-20,-21,-12,-19,-5,-13,-14,-15,-1,]),'LPAREN':([2,18,],[11,30,]),'RLLAVE':([3,5,6,10,12,29,42,43,46,47,48,52,53,57,],[-18,-20,-21,-12,-19,-5,-13,46,-14,52,-16,-15,-17,-1,]),'PUNTOYCOMA':([4,8,9,11,17,18,20,21,22,23,25,26,27,28,29,33,35,36,38,39,40,51,],[12,-26,-27,-29,29,-7,34,-2,35,-4,-22,-23,-24,-25,-5,-28,-3,-7,-6,-8,44,-9,]),'SUMA':([4,8,9,22,25,26,27,28,33,38,41,50,51,55,],[13,-26,-27,13,-22,-23,-24,-25,13,13,13,55,13,58,]),'RESTA':([4,8,9,22,25,26,27,28,33,38,41,50,51,56,],[14,-26,-27,14,-22,-23,-24,-25,14,14,14,56,14,59,]),'MULTI':([4,8,9,22,25,26,27,28,33,38,41,51,],[15,-26,-27,15,15,15,-24,-25,15,15,15,15,]),'DIVIDE':([4,8,9,22,25,26,27,28,33,38,41,51,],[16,-26,-27,16,16,16,-24,-25,16,16,16,16,]),'COMPARADOR':([8,9,25,26,27,28,33,41,],[-26,-27,-22,-23,-24,-25,-28,45,]),'IGUAL':([9,18,36,],[19,31,31,]),'COMA':([18,36,],[32,32,]),'RPAREN':([30,49,58,59,],[37,54,-10,-11,]),'LLLAVE':([37,54,],[43,43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,43,48,],[1,48,48,]),'declaration':([0,11,43,48,],[3,21,3,3,]),'expression':([0,11,13,14,15,16,19,31,34,43,45,48,],[4,22,25,26,27,28,33,38,41,4,51,4,]),'preprocessor_directive':([0,43,48,],[5,5,5,]),'function_definition':([0,43,48,],[6,6,6,]),'identificador_list':([7,24,32,],[17,17,39,]),'for_init':([11,],[20,]),'empty':([11,],[23,]),'condition':([34,],[40,]),'block':([37,54,],[42,57,]),'statement_list':([43,48,],[47,53,]),'for_update':([44,],[49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> FOR LPAREN for_init PUNTOYCOMA condition PUNTOYCOMA for_update RPAREN block','statement',9,'p_statement_for','parser.py',12),
  ('for_init -> declaration','for_init',1,'p_for_init','parser.py',17),
  ('for_init -> expression PUNTOYCOMA','for_init',2,'p_for_init','parser.py',18),
  ('for_init -> empty','for_init',1,'p_for_init','parser.py',19),
  ('declaration -> TIPODATO identificador_list PUNTOYCOMA','declaration',3,'p_declaration','parser.py',24),
  ('identificador_list -> IDENTIFICADOR IGUAL expression','identificador_list',3,'p_identificador_list','parser.py',29),
  ('identificador_list -> IDENTIFICADOR','identificador_list',1,'p_identificador_list','parser.py',30),
  ('identificador_list -> IDENTIFICADOR COMA identificador_list','identificador_list',3,'p_identificador_list','parser.py',31),
  ('condition -> expression COMPARADOR expression','condition',3,'p_condition','parser.py',41),
  ('for_update -> IDENTIFICADOR SUMA SUMA','for_update',3,'p_for_update','parser.py',46),
  ('for_update -> IDENTIFICADOR RESTA RESTA','for_update',3,'p_for_update','parser.py',47),
  ('preprocessor_directive -> INCLUDE','preprocessor_directive',1,'p_preprocessor_directive','parser.py',52),
  ('function_definition -> TIPODATO IDENTIFICADOR LPAREN RPAREN block','function_definition',5,'p_function_definition','parser.py',57),
  ('block -> LLLAVE RLLAVE','block',2,'p_block','parser.py',62),
  ('block -> LLLAVE statement_list RLLAVE','block',3,'p_block','parser.py',63),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',71),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',72),
  ('statement -> declaration','statement',1,'p_statement','parser.py',80),
  ('statement -> expression PUNTOYCOMA','statement',2,'p_statement','parser.py',81),
  ('statement -> preprocessor_directive','statement',1,'p_statement','parser.py',82),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',83),
  ('expression -> expression SUMA expression','expression',3,'p_expression_binop','parser.py',88),
  ('expression -> expression RESTA expression','expression',3,'p_expression_binop','parser.py',89),
  ('expression -> expression MULTI expression','expression',3,'p_expression_binop','parser.py',90),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',91),
  ('expression -> NUMERO','expression',1,'p_expression_number','parser.py',96),
  ('expression -> IDENTIFICADOR','expression',1,'p_expression_identifier','parser.py',101),
  ('expression -> IDENTIFICADOR IGUAL expression','expression',3,'p_expression_assign','parser.py',106),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',111),
]
