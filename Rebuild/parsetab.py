
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND CHAR CHAR_LITERAL COMMA COMPARER DIVIDE DOT ELSE EQUAL FLOAT FOR HEADER IDENTIFIER IF INCLUDE INT LBRACE LBRAKET LPAREN MAIN MINUS NUMBER PLUS PRINTF RBRACE RBRAKET RETURN RPAREN SCANF SEMICOLON STRING TIMESprogram : preprocesor_directives_list function\n               | functionpreprocesor_directives_list : preprocesor_directive preprocesor_directives_list\n                                   | preprocesor_directivepreprocesor_directive : INCLUDE HEADERfunction : INT MAIN LPAREN RPAREN LBRACE statement_list RBRACEstatement_list : statement statement_list \n                      | statementstatement : declaration\n                 | assignment\n                 | for_loop\n                 | if_statement\n                 | function_call\n                 | return_statementidentifier_list : IDENTIFIER\n                       | IDENTIFIER COMMA identifier_listdeclaration : type_specifier IDENTIFIER EQUAL expression SEMICOLON\n                   | type_specifier identifier_list SEMICOLON\n                   | type_specifier identifier_list LBRAKET NUMBER RBRAKET SEMICOLONtype_specifier : INT\n                      | FLOAT\n                      | CHARcompound_assignment : PLUS EQUAL\n                           | MINUS EQUAL\n                           | TIMES EQUAL\n                           | DIVIDE EQUALassignment : IDENTIFIER EQUAL expression SEMICOLON\n                  | IDENTIFIER compound_assignment expression SEMICOLON\n                  | IDENTIFIER LBRAKET expression RBRAKET compound_assignment expression SEMICOLON\n                  | IDENTIFIER LBRAKET expression RBRAKET EQUAL expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | LPAREN expression RPAREN\n                  | NUMBER\n                  | CHAR_LITERAL\n                  | CHAR\n                  | IDENTIFIER\n                  | IDENTIFIER LBRAKET expression RBRAKETexpression_list : expression\n                       | expression COMMA expression_listunitarymodifiers : IDENTIFIER PLUS PLUS\n                        | IDENTIFIER MINUS MINUSfor_loop : FOR LPAREN assignment condition SEMICOLON unitarymodifiers RPAREN LBRACE statement_list RBRACEcondition : expression COMPARER expressionif_statement : IF LPAREN condition RPAREN LBRACE statement_list RBRACE\n                    | IF LPAREN condition RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEfunction_call : PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN SEMICOLON\n                     | PRINTF LPAREN STRING RPAREN SEMICOLON\n                     | PRINTF LPAREN STRING COMMA expression_list RPAREN SEMICOLON\n                     | SCANF LPAREN STRING COMMA AMPERSAND IDENTIFIER RPAREN SEMICOLONreturn_statement : RETURN SEMICOLON\n                        | RETURN expression SEMICOLON'
    
_lr_action_items = {'INT':([0,2,4,8,10,13,16,17,18,19,20,21,22,47,56,70,81,82,96,101,106,109,119,120,124,125,126,129,133,135,136,138,],[5,5,-4,-3,-5,14,14,-9,-10,-11,-12,-13,-14,-53,-18,-54,-27,-28,-17,14,-50,-19,-29,-30,-47,-49,-51,14,-52,14,-45,-48,]),'INCLUDE':([0,4,10,],[6,6,-5,]),'$end':([1,3,7,32,],[0,-2,-1,-6,]),'MAIN':([5,],[9,]),'HEADER':([6,],[10,]),'LPAREN':([9,25,26,27,28,29,36,37,38,44,49,54,61,62,63,64,65,71,72,73,74,76,81,82,86,87,98,99,117,119,120,],[11,43,44,45,46,49,49,49,49,49,49,49,-23,-24,-25,-26,49,49,49,49,49,49,-27,-28,49,49,49,49,49,-29,-30,]),'RPAREN':([11,50,51,52,53,66,68,75,90,91,92,93,94,102,103,104,105,108,112,118,127,130,131,],[12,-36,-37,-38,-39,85,88,94,-31,-32,-33,-34,-35,-46,115,116,-41,-40,121,128,-42,-43,-44,]),'LBRACE':([12,85,121,132,],[13,101,129,135,]),'IDENTIFIER':([13,14,16,17,18,19,20,21,22,23,29,30,31,36,37,38,43,44,47,49,54,55,56,61,62,63,64,65,70,71,72,73,74,76,81,82,86,87,96,98,99,100,101,106,107,109,117,119,120,124,125,126,129,133,135,136,138,],[24,-20,24,-9,-10,-11,-12,-13,-14,34,53,-21,-22,53,53,53,24,53,-53,53,53,78,-18,-23,-24,-25,-26,53,-54,53,53,53,53,53,-27,-28,53,103,-17,53,53,113,24,-50,118,-19,53,-29,-30,-47,-49,-51,24,-52,24,-45,-48,]),'FOR':([13,16,17,18,19,20,21,22,47,56,70,81,82,96,101,106,109,119,120,124,125,126,129,133,135,136,138,],[25,25,-9,-10,-11,-12,-13,-14,-53,-18,-54,-27,-28,-17,25,-50,-19,-29,-30,-47,-49,-51,25,-52,25,-45,-48,]),'IF':([13,16,17,18,19,20,21,22,47,56,70,81,82,96,101,106,109,119,120,124,125,126,129,133,135,136,138,],[26,26,-9,-10,-11,-12,-13,-14,-53,-18,-54,-27,-28,-17,26,-50,-19,-29,-30,-47,-49,-51,26,-52,26,-45,-48,]),'PRINTF':([13,16,17,18,19,20,21,22,47,56,70,81,82,96,101,106,109,119,120,124,125,126,129,133,135,136,138,],[27,27,-9,-10,-11,-12,-13,-14,-53,-18,-54,-27,-28,-17,27,-50,-19,-29,-30,-47,-49,-51,27,-52,27,-45,-48,]),'SCANF':([13,16,17,18,19,20,21,22,47,56,70,81,82,96,101,106,109,119,120,124,125,126,129,133,135,136,138,],[28,28,-9,-10,-11,-12,-13,-14,-53,-18,-54,-27,-28,-17,28,-50,-19,-29,-30,-47,-49,-51,28,-52,28,-45,-48,]),'RETURN':([13,16,17,18,19,20,21,22,47,56,70,81,82,96,101,106,109,119,120,124,125,126,129,133,135,136,138,],[29,29,-9,-10,-11,-12,-13,-14,-53,-18,-54,-27,-28,-17,29,-50,-19,-29,-30,-47,-49,-51,29,-52,29,-45,-48,]),'FLOAT':([13,16,17,18,19,20,21,22,47,56,70,81,82,96,101,106,109,119,120,124,125,126,129,133,135,136,138,],[30,30,-9,-10,-11,-12,-13,-14,-53,-18,-54,-27,-28,-17,30,-50,-19,-29,-30,-47,-49,-51,30,-52,30,-45,-48,]),'CHAR':([13,16,17,18,19,20,21,22,29,36,37,38,44,47,49,54,56,61,62,63,64,65,70,71,72,73,74,76,81,82,86,87,96,98,99,101,106,109,117,119,120,124,125,126,129,133,135,136,138,],[31,31,-9,-10,-11,-12,-13,-14,52,52,52,52,52,-53,52,52,-18,-23,-24,-25,-26,52,-54,52,52,52,52,52,-27,-28,52,52,-17,52,52,31,-50,-19,52,-29,-30,-47,-49,-51,31,-52,31,-45,-48,]),'RBRACE':([15,16,17,18,19,20,21,22,33,47,56,70,81,82,96,106,109,114,119,120,124,125,126,133,134,136,137,138,],[32,-8,-9,-10,-11,-12,-13,-14,-7,-53,-18,-54,-27,-28,-17,-50,-19,124,-29,-30,-47,-49,-51,-52,136,-45,138,-48,]),'EQUAL':([24,34,39,40,41,42,83,],[36,54,61,62,63,64,99,]),'LBRAKET':([24,34,35,53,78,79,103,],[38,-15,57,76,-15,-16,76,]),'PLUS':([24,48,50,51,52,53,58,59,60,67,75,77,83,90,91,92,93,94,95,102,103,105,108,110,111,113,122,],[39,71,-36,-37,-38,-39,71,71,71,71,71,71,39,71,71,71,71,-35,71,71,-39,71,-40,71,71,122,130,]),'MINUS':([24,48,50,51,52,53,58,59,60,67,75,77,83,90,91,92,93,94,95,102,103,105,108,110,111,113,123,],[40,72,-36,-37,-38,-39,72,72,72,72,72,72,40,72,72,72,72,-35,72,72,-39,72,-40,72,72,123,131,]),'TIMES':([24,48,50,51,52,53,58,59,60,67,75,77,83,90,91,92,93,94,95,102,103,105,108,110,111,],[41,73,-36,-37,-38,-39,73,73,73,73,73,73,41,73,73,73,73,-35,73,73,-39,73,-40,73,73,]),'DIVIDE':([24,48,50,51,52,53,58,59,60,67,75,77,83,90,91,92,93,94,95,102,103,105,108,110,111,],[42,74,-36,-37,-38,-39,74,74,74,74,74,74,42,74,74,74,74,-35,74,74,-39,74,-40,74,74,]),'SEMICOLON':([29,34,35,48,50,51,52,53,58,59,77,78,79,84,88,90,91,92,93,94,97,102,108,110,111,115,116,128,],[47,-15,56,70,-36,-37,-38,-39,81,82,96,-15,-16,100,106,-31,-32,-33,-34,-35,109,-46,-40,119,120,125,126,133,]),'NUMBER':([29,36,37,38,44,49,54,57,61,62,63,64,65,71,72,73,74,76,81,82,86,87,98,99,117,119,120,],[50,50,50,50,50,50,50,80,-23,-24,-25,-26,50,50,50,50,50,50,-27,-28,50,50,50,50,50,-29,-30,]),'CHAR_LITERAL':([29,36,37,38,44,49,54,61,62,63,64,65,71,72,73,74,76,81,82,86,87,98,99,117,119,120,],[51,51,51,51,51,51,51,-23,-24,-25,-26,51,51,51,51,51,51,-27,-28,51,51,51,51,51,-29,-30,]),'COMMA':([34,50,51,52,53,68,69,78,90,91,92,93,94,103,105,108,],[55,-36,-37,-38,-39,87,89,55,-31,-32,-33,-34,-35,-39,117,-40,]),'STRING':([45,46,],[68,69,]),'RBRAKET':([50,51,52,53,60,80,90,91,92,93,94,95,108,],[-36,-37,-38,-39,83,97,-31,-32,-33,-34,-35,108,-40,]),'COMPARER':([50,51,52,53,67,90,91,92,93,94,108,],[-36,-37,-38,-39,86,-31,-32,-33,-34,-35,-40,]),'AMPERSAND':([89,],[107,]),'ELSE':([124,],[132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'preprocesor_directives_list':([0,4,],[2,8,]),'function':([0,2,],[3,7,]),'preprocesor_directive':([0,4,],[4,4,]),'statement_list':([13,16,101,129,135,],[15,33,114,134,137,]),'statement':([13,16,101,129,135,],[16,16,16,16,16,]),'declaration':([13,16,101,129,135,],[17,17,17,17,17,]),'assignment':([13,16,43,101,129,135,],[18,18,65,18,18,18,]),'for_loop':([13,16,101,129,135,],[19,19,19,19,19,]),'if_statement':([13,16,101,129,135,],[20,20,20,20,20,]),'function_call':([13,16,101,129,135,],[21,21,21,21,21,]),'return_statement':([13,16,101,129,135,],[22,22,22,22,22,]),'type_specifier':([13,16,101,129,135,],[23,23,23,23,23,]),'identifier_list':([23,55,],[35,79,]),'compound_assignment':([24,83,],[37,98,]),'expression':([29,36,37,38,44,49,54,65,71,72,73,74,76,86,87,98,99,117,],[48,58,59,60,67,75,77,67,90,91,92,93,95,102,105,110,111,105,]),'condition':([44,65,],[66,84,]),'expression_list':([87,117,],[104,127,]),'unitarymodifiers':([100,],[112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> preprocesor_directives_list function','program',2,'p_program','sintaxy.py',6),
  ('program -> function','program',1,'p_program','sintaxy.py',7),
  ('preprocesor_directives_list -> preprocesor_directive preprocesor_directives_list','preprocesor_directives_list',2,'p_preprocesor_directives_list','sintaxy.py',14),
  ('preprocesor_directives_list -> preprocesor_directive','preprocesor_directives_list',1,'p_preprocesor_directives_list','sintaxy.py',15),
  ('preprocesor_directive -> INCLUDE HEADER','preprocesor_directive',2,'p_preprocesor_directive','sintaxy.py',23),
  ('function -> INT MAIN LPAREN RPAREN LBRACE statement_list RBRACE','function',7,'p_function','sintaxy.py',27),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','sintaxy.py',31),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintaxy.py',32),
  ('statement -> declaration','statement',1,'p_statement','sintaxy.py',39),
  ('statement -> assignment','statement',1,'p_statement','sintaxy.py',40),
  ('statement -> for_loop','statement',1,'p_statement','sintaxy.py',41),
  ('statement -> if_statement','statement',1,'p_statement','sintaxy.py',42),
  ('statement -> function_call','statement',1,'p_statement','sintaxy.py',43),
  ('statement -> return_statement','statement',1,'p_statement','sintaxy.py',44),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','sintaxy.py',48),
  ('identifier_list -> IDENTIFIER COMMA identifier_list','identifier_list',3,'p_identifier_list','sintaxy.py',49),
  ('declaration -> type_specifier IDENTIFIER EQUAL expression SEMICOLON','declaration',5,'p_declaration','sintaxy.py',56),
  ('declaration -> type_specifier identifier_list SEMICOLON','declaration',3,'p_declaration','sintaxy.py',57),
  ('declaration -> type_specifier identifier_list LBRAKET NUMBER RBRAKET SEMICOLON','declaration',6,'p_declaration','sintaxy.py',58),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','sintaxy.py',67),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','sintaxy.py',68),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','sintaxy.py',69),
  ('compound_assignment -> PLUS EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',73),
  ('compound_assignment -> MINUS EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',74),
  ('compound_assignment -> TIMES EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',75),
  ('compound_assignment -> DIVIDE EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',76),
  ('assignment -> IDENTIFIER EQUAL expression SEMICOLON','assignment',4,'p_assignment','sintaxy.py',80),
  ('assignment -> IDENTIFIER compound_assignment expression SEMICOLON','assignment',4,'p_assignment','sintaxy.py',81),
  ('assignment -> IDENTIFIER LBRAKET expression RBRAKET compound_assignment expression SEMICOLON','assignment',7,'p_assignment','sintaxy.py',82),
  ('assignment -> IDENTIFIER LBRAKET expression RBRAKET EQUAL expression SEMICOLON','assignment',7,'p_assignment','sintaxy.py',83),
  ('expression -> expression PLUS expression','expression',3,'p_expression','sintaxy.py',90),
  ('expression -> expression MINUS expression','expression',3,'p_expression','sintaxy.py',91),
  ('expression -> expression TIMES expression','expression',3,'p_expression','sintaxy.py',92),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','sintaxy.py',93),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','sintaxy.py',94),
  ('expression -> NUMBER','expression',1,'p_expression','sintaxy.py',95),
  ('expression -> CHAR_LITERAL','expression',1,'p_expression','sintaxy.py',96),
  ('expression -> CHAR','expression',1,'p_expression','sintaxy.py',97),
  ('expression -> IDENTIFIER','expression',1,'p_expression','sintaxy.py',98),
  ('expression -> IDENTIFIER LBRAKET expression RBRAKET','expression',4,'p_expression','sintaxy.py',99),
  ('expression_list -> expression','expression_list',1,'p_expression_list','sintaxy.py',108),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','sintaxy.py',109),
  ('unitarymodifiers -> IDENTIFIER PLUS PLUS','unitarymodifiers',3,'p_unitarymodifiers','sintaxy.py',116),
  ('unitarymodifiers -> IDENTIFIER MINUS MINUS','unitarymodifiers',3,'p_unitarymodifiers','sintaxy.py',117),
  ('for_loop -> FOR LPAREN assignment condition SEMICOLON unitarymodifiers RPAREN LBRACE statement_list RBRACE','for_loop',10,'p_for_loop','sintaxy.py',121),
  ('condition -> expression COMPARER expression','condition',3,'p_condition','sintaxy.py',125),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statement_list RBRACE','if_statement',7,'p_if_statement','sintaxy.py',129),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_statement',11,'p_if_statement','sintaxy.py',130),
  ('function_call -> PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN SEMICOLON','function_call',7,'p_function_call','sintaxy.py',137),
  ('function_call -> PRINTF LPAREN STRING RPAREN SEMICOLON','function_call',5,'p_function_call','sintaxy.py',138),
  ('function_call -> PRINTF LPAREN STRING COMMA expression_list RPAREN SEMICOLON','function_call',7,'p_function_call','sintaxy.py',139),
  ('function_call -> SCANF LPAREN STRING COMMA AMPERSAND IDENTIFIER RPAREN SEMICOLON','function_call',8,'p_function_call','sintaxy.py',140),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','sintaxy.py',144),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','sintaxy.py',145),
]
