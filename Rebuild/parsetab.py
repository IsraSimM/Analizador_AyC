
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND CHAR CHAR_LITERAL COMMA COMPARER DIVIDE DOT ELSE EQUAL FLOAT FOR HEADER IDENTIFIER IF INCLUDE INT LBRACE LBRAKET LPAREN MAIN MINUS NUMBER PLUS PRINTF RBRACE RBRAKET RETURN RPAREN SCANF SEMICOLON STRING TIMESprogram : preprocesor_directives_list function\n               | functionpreprocesor_directives_list : preprocesor_directive preprocesor_directives_list\n                                   | preprocesor_directivepreprocesor_directive : INCLUDE HEADERfunction : INT MAIN LPAREN RPAREN LBRACE statement_list RBRACEstatement_list : statement statement_list \n                      | statementstatement : declaration\n                 | assignment\n                 | for_loop\n                 | if_statement\n                 | function_call\n                 | return_statementidentifier_list : IDENTIFIER\n                       | IDENTIFIER COMMA identifier_listdeclaration : type_specifier IDENTIFIER EQUAL expression SEMICOLON\n                   | type_specifier identifier_list SEMICOLON\n                   | type_specifier identifier_list EQUAL expression SEMICOLON\n                   | type_specifier identifier_list LBRAKET NUMBER RBRAKET SEMICOLONtype_specifier : INT\n                      | FLOAT\n                      | CHARcompound_assignment : PLUS EQUAL\n                           | MINUS EQUAL\n                           | TIMES EQUAL\n                           | DIVIDE EQUALassignment : IDENTIFIER EQUAL expression SEMICOLON\n                  | IDENTIFIER compound_assignment expression SEMICOLON\n                  | IDENTIFIER LBRAKET expression RBRAKET compound_assignment expression SEMICOLON\n                  | IDENTIFIER LBRAKET expression RBRAKET EQUAL expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | LPAREN expression RPAREN\n                  | NUMBER\n                  | CHAR_LITERAL\n                  | CHAR\n                  | IDENTIFIER\n                  | IDENTIFIER LBRAKET expression RBRAKETexpression_list : expression\n                       | expression COMMA expression_listunitarymodifiers : IDENTIFIER PLUS PLUS\n                        | IDENTIFIER MINUS MINUSfor_loop : FOR LPAREN assignment condition SEMICOLON unitarymodifiers RPAREN LBRACE statement_list RBRACEcondition : expression COMPARER expressionif_statement : IF LPAREN condition RPAREN LBRACE statement_list RBRACE\n                    | IF LPAREN condition RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEfunction_call : PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN SEMICOLON\n                     | PRINTF LPAREN STRING RPAREN SEMICOLON\n                     | PRINTF LPAREN STRING COMMA expression_list RPAREN SEMICOLON\n                     | SCANF LPAREN STRING COMMA AMPERSAND IDENTIFIER RPAREN SEMICOLONreturn_statement : RETURN SEMICOLON\n                        | RETURN expression SEMICOLON'
    
_lr_action_items = {'INT':([0,2,4,8,10,13,16,17,18,19,20,21,22,47,56,71,83,84,98,99,104,109,112,122,123,127,128,129,132,136,138,139,141,],[5,5,-4,-3,-5,14,14,-9,-10,-11,-12,-13,-14,-54,-18,-55,-28,-29,-17,-19,14,-51,-20,-30,-31,-48,-50,-52,14,-53,14,-46,-49,]),'INCLUDE':([0,4,10,],[6,6,-5,]),'$end':([1,3,7,32,],[0,-2,-1,-6,]),'MAIN':([5,],[9,]),'HEADER':([6,],[10,]),'LPAREN':([9,25,26,27,28,29,36,37,38,44,49,54,57,62,63,64,65,66,72,73,74,75,77,83,84,88,89,101,102,120,122,123,],[11,43,44,45,46,49,49,49,49,49,49,49,49,-24,-25,-26,-27,49,49,49,49,49,49,-28,-29,49,49,49,49,49,-30,-31,]),'RPAREN':([11,50,51,52,53,67,69,76,92,93,94,95,96,105,106,107,108,111,115,121,130,133,134,],[12,-37,-38,-39,-40,87,90,96,-32,-33,-34,-35,-36,-47,118,119,-42,-41,124,131,-43,-44,-45,]),'LBRACE':([12,87,124,135,],[13,104,132,138,]),'IDENTIFIER':([13,14,16,17,18,19,20,21,22,23,29,30,31,36,37,38,43,44,47,49,54,55,56,57,62,63,64,65,66,71,72,73,74,75,77,83,84,88,89,98,99,101,102,103,104,109,110,112,120,122,123,127,128,129,132,136,138,139,141,],[24,-21,24,-9,-10,-11,-12,-13,-14,34,53,-22,-23,53,53,53,24,53,-54,53,53,79,-18,53,-24,-25,-26,-27,53,-55,53,53,53,53,53,-28,-29,53,106,-17,-19,53,53,116,24,-51,121,-20,53,-30,-31,-48,-50,-52,24,-53,24,-46,-49,]),'FOR':([13,16,17,18,19,20,21,22,47,56,71,83,84,98,99,104,109,112,122,123,127,128,129,132,136,138,139,141,],[25,25,-9,-10,-11,-12,-13,-14,-54,-18,-55,-28,-29,-17,-19,25,-51,-20,-30,-31,-48,-50,-52,25,-53,25,-46,-49,]),'IF':([13,16,17,18,19,20,21,22,47,56,71,83,84,98,99,104,109,112,122,123,127,128,129,132,136,138,139,141,],[26,26,-9,-10,-11,-12,-13,-14,-54,-18,-55,-28,-29,-17,-19,26,-51,-20,-30,-31,-48,-50,-52,26,-53,26,-46,-49,]),'PRINTF':([13,16,17,18,19,20,21,22,47,56,71,83,84,98,99,104,109,112,122,123,127,128,129,132,136,138,139,141,],[27,27,-9,-10,-11,-12,-13,-14,-54,-18,-55,-28,-29,-17,-19,27,-51,-20,-30,-31,-48,-50,-52,27,-53,27,-46,-49,]),'SCANF':([13,16,17,18,19,20,21,22,47,56,71,83,84,98,99,104,109,112,122,123,127,128,129,132,136,138,139,141,],[28,28,-9,-10,-11,-12,-13,-14,-54,-18,-55,-28,-29,-17,-19,28,-51,-20,-30,-31,-48,-50,-52,28,-53,28,-46,-49,]),'RETURN':([13,16,17,18,19,20,21,22,47,56,71,83,84,98,99,104,109,112,122,123,127,128,129,132,136,138,139,141,],[29,29,-9,-10,-11,-12,-13,-14,-54,-18,-55,-28,-29,-17,-19,29,-51,-20,-30,-31,-48,-50,-52,29,-53,29,-46,-49,]),'FLOAT':([13,16,17,18,19,20,21,22,47,56,71,83,84,98,99,104,109,112,122,123,127,128,129,132,136,138,139,141,],[30,30,-9,-10,-11,-12,-13,-14,-54,-18,-55,-28,-29,-17,-19,30,-51,-20,-30,-31,-48,-50,-52,30,-53,30,-46,-49,]),'CHAR':([13,16,17,18,19,20,21,22,29,36,37,38,44,47,49,54,56,57,62,63,64,65,66,71,72,73,74,75,77,83,84,88,89,98,99,101,102,104,109,112,120,122,123,127,128,129,132,136,138,139,141,],[31,31,-9,-10,-11,-12,-13,-14,52,52,52,52,52,-54,52,52,-18,52,-24,-25,-26,-27,52,-55,52,52,52,52,52,-28,-29,52,52,-17,-19,52,52,31,-51,-20,52,-30,-31,-48,-50,-52,31,-53,31,-46,-49,]),'RBRACE':([15,16,17,18,19,20,21,22,33,47,56,71,83,84,98,99,109,112,117,122,123,127,128,129,136,137,139,140,141,],[32,-8,-9,-10,-11,-12,-13,-14,-7,-54,-18,-55,-28,-29,-17,-19,-51,-20,127,-30,-31,-48,-50,-52,-53,139,-46,141,-49,]),'EQUAL':([24,34,35,39,40,41,42,79,80,85,],[36,54,57,62,63,64,65,-15,-16,102,]),'LBRAKET':([24,34,35,53,79,80,106,],[38,-15,58,77,-15,-16,77,]),'PLUS':([24,48,50,51,52,53,59,60,61,68,76,78,81,85,92,93,94,95,96,97,105,106,108,111,113,114,116,125,],[39,72,-37,-38,-39,-40,72,72,72,72,72,72,72,39,72,72,72,72,-36,72,72,-40,72,-41,72,72,125,133,]),'MINUS':([24,48,50,51,52,53,59,60,61,68,76,78,81,85,92,93,94,95,96,97,105,106,108,111,113,114,116,126,],[40,73,-37,-38,-39,-40,73,73,73,73,73,73,73,40,73,73,73,73,-36,73,73,-40,73,-41,73,73,126,134,]),'TIMES':([24,48,50,51,52,53,59,60,61,68,76,78,81,85,92,93,94,95,96,97,105,106,108,111,113,114,],[41,74,-37,-38,-39,-40,74,74,74,74,74,74,74,41,74,74,74,74,-36,74,74,-40,74,-41,74,74,]),'DIVIDE':([24,48,50,51,52,53,59,60,61,68,76,78,81,85,92,93,94,95,96,97,105,106,108,111,113,114,],[42,75,-37,-38,-39,-40,75,75,75,75,75,75,75,42,75,75,75,75,-36,75,75,-40,75,-41,75,75,]),'SEMICOLON':([29,34,35,48,50,51,52,53,59,60,78,79,80,81,86,90,92,93,94,95,96,100,105,111,113,114,118,119,131,],[47,-15,56,71,-37,-38,-39,-40,83,84,98,-15,-16,99,103,109,-32,-33,-34,-35,-36,112,-47,-41,122,123,128,129,136,]),'NUMBER':([29,36,37,38,44,49,54,57,58,62,63,64,65,66,72,73,74,75,77,83,84,88,89,101,102,120,122,123,],[50,50,50,50,50,50,50,50,82,-24,-25,-26,-27,50,50,50,50,50,50,-28,-29,50,50,50,50,50,-30,-31,]),'CHAR_LITERAL':([29,36,37,38,44,49,54,57,62,63,64,65,66,72,73,74,75,77,83,84,88,89,101,102,120,122,123,],[51,51,51,51,51,51,51,51,-24,-25,-26,-27,51,51,51,51,51,51,-28,-29,51,51,51,51,51,-30,-31,]),'COMMA':([34,50,51,52,53,69,70,79,92,93,94,95,96,106,108,111,],[55,-37,-38,-39,-40,89,91,55,-32,-33,-34,-35,-36,-40,120,-41,]),'STRING':([45,46,],[69,70,]),'RBRAKET':([50,51,52,53,61,82,92,93,94,95,96,97,111,],[-37,-38,-39,-40,85,100,-32,-33,-34,-35,-36,111,-41,]),'COMPARER':([50,51,52,53,68,92,93,94,95,96,111,],[-37,-38,-39,-40,88,-32,-33,-34,-35,-36,-41,]),'AMPERSAND':([91,],[110,]),'ELSE':([127,],[135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'preprocesor_directives_list':([0,4,],[2,8,]),'function':([0,2,],[3,7,]),'preprocesor_directive':([0,4,],[4,4,]),'statement_list':([13,16,104,132,138,],[15,33,117,137,140,]),'statement':([13,16,104,132,138,],[16,16,16,16,16,]),'declaration':([13,16,104,132,138,],[17,17,17,17,17,]),'assignment':([13,16,43,104,132,138,],[18,18,66,18,18,18,]),'for_loop':([13,16,104,132,138,],[19,19,19,19,19,]),'if_statement':([13,16,104,132,138,],[20,20,20,20,20,]),'function_call':([13,16,104,132,138,],[21,21,21,21,21,]),'return_statement':([13,16,104,132,138,],[22,22,22,22,22,]),'type_specifier':([13,16,104,132,138,],[23,23,23,23,23,]),'identifier_list':([23,55,],[35,80,]),'compound_assignment':([24,85,],[37,101,]),'expression':([29,36,37,38,44,49,54,57,66,72,73,74,75,77,88,89,101,102,120,],[48,59,60,61,68,76,78,81,68,92,93,94,95,97,105,108,113,114,108,]),'condition':([44,66,],[67,86,]),'expression_list':([89,120,],[107,130,]),'unitarymodifiers':([103,],[115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> preprocesor_directives_list function','program',2,'p_program','sintaxy.py',113),
  ('program -> function','program',1,'p_program','sintaxy.py',114),
  ('preprocesor_directives_list -> preprocesor_directive preprocesor_directives_list','preprocesor_directives_list',2,'p_preprocesor_directives_list','sintaxy.py',121),
  ('preprocesor_directives_list -> preprocesor_directive','preprocesor_directives_list',1,'p_preprocesor_directives_list','sintaxy.py',122),
  ('preprocesor_directive -> INCLUDE HEADER','preprocesor_directive',2,'p_preprocesor_directive','sintaxy.py',129),
  ('function -> INT MAIN LPAREN RPAREN LBRACE statement_list RBRACE','function',7,'p_function','sintaxy.py',133),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','sintaxy.py',137),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintaxy.py',138),
  ('statement -> declaration','statement',1,'p_statement','sintaxy.py',145),
  ('statement -> assignment','statement',1,'p_statement','sintaxy.py',146),
  ('statement -> for_loop','statement',1,'p_statement','sintaxy.py',147),
  ('statement -> if_statement','statement',1,'p_statement','sintaxy.py',148),
  ('statement -> function_call','statement',1,'p_statement','sintaxy.py',149),
  ('statement -> return_statement','statement',1,'p_statement','sintaxy.py',150),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','sintaxy.py',154),
  ('identifier_list -> IDENTIFIER COMMA identifier_list','identifier_list',3,'p_identifier_list','sintaxy.py',155),
  ('declaration -> type_specifier IDENTIFIER EQUAL expression SEMICOLON','declaration',5,'p_declaration','sintaxy.py',162),
  ('declaration -> type_specifier identifier_list SEMICOLON','declaration',3,'p_declaration','sintaxy.py',163),
  ('declaration -> type_specifier identifier_list EQUAL expression SEMICOLON','declaration',5,'p_declaration','sintaxy.py',164),
  ('declaration -> type_specifier identifier_list LBRAKET NUMBER RBRAKET SEMICOLON','declaration',6,'p_declaration','sintaxy.py',165),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','sintaxy.py',177),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','sintaxy.py',178),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','sintaxy.py',179),
  ('compound_assignment -> PLUS EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',183),
  ('compound_assignment -> MINUS EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',184),
  ('compound_assignment -> TIMES EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',185),
  ('compound_assignment -> DIVIDE EQUAL','compound_assignment',2,'p_compound_assignment','sintaxy.py',186),
  ('assignment -> IDENTIFIER EQUAL expression SEMICOLON','assignment',4,'p_assignment','sintaxy.py',190),
  ('assignment -> IDENTIFIER compound_assignment expression SEMICOLON','assignment',4,'p_assignment','sintaxy.py',191),
  ('assignment -> IDENTIFIER LBRAKET expression RBRAKET compound_assignment expression SEMICOLON','assignment',7,'p_assignment','sintaxy.py',192),
  ('assignment -> IDENTIFIER LBRAKET expression RBRAKET EQUAL expression SEMICOLON','assignment',7,'p_assignment','sintaxy.py',193),
  ('expression -> expression PLUS expression','expression',3,'p_expression','sintaxy.py',213),
  ('expression -> expression MINUS expression','expression',3,'p_expression','sintaxy.py',214),
  ('expression -> expression TIMES expression','expression',3,'p_expression','sintaxy.py',215),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','sintaxy.py',216),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','sintaxy.py',217),
  ('expression -> NUMBER','expression',1,'p_expression','sintaxy.py',218),
  ('expression -> CHAR_LITERAL','expression',1,'p_expression','sintaxy.py',219),
  ('expression -> CHAR','expression',1,'p_expression','sintaxy.py',220),
  ('expression -> IDENTIFIER','expression',1,'p_expression','sintaxy.py',221),
  ('expression -> IDENTIFIER LBRAKET expression RBRAKET','expression',4,'p_expression','sintaxy.py',222),
  ('expression_list -> expression','expression_list',1,'p_expression_list','sintaxy.py',231),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','sintaxy.py',232),
  ('unitarymodifiers -> IDENTIFIER PLUS PLUS','unitarymodifiers',3,'p_unitarymodifiers','sintaxy.py',239),
  ('unitarymodifiers -> IDENTIFIER MINUS MINUS','unitarymodifiers',3,'p_unitarymodifiers','sintaxy.py',240),
  ('for_loop -> FOR LPAREN assignment condition SEMICOLON unitarymodifiers RPAREN LBRACE statement_list RBRACE','for_loop',10,'p_for_loop','sintaxy.py',244),
  ('condition -> expression COMPARER expression','condition',3,'p_condition','sintaxy.py',248),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statement_list RBRACE','if_statement',7,'p_if_statement','sintaxy.py',252),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_statement',11,'p_if_statement','sintaxy.py',253),
  ('function_call -> PRINTF LPAREN STRING COMMA IDENTIFIER RPAREN SEMICOLON','function_call',7,'p_function_call','sintaxy.py',260),
  ('function_call -> PRINTF LPAREN STRING RPAREN SEMICOLON','function_call',5,'p_function_call','sintaxy.py',261),
  ('function_call -> PRINTF LPAREN STRING COMMA expression_list RPAREN SEMICOLON','function_call',7,'p_function_call','sintaxy.py',262),
  ('function_call -> SCANF LPAREN STRING COMMA AMPERSAND IDENTIFIER RPAREN SEMICOLON','function_call',8,'p_function_call','sintaxy.py',263),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','sintaxy.py',267),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','sintaxy.py',268),
]
